Name: BuildAndPush
RunMode: SUPERSEDED
Compute:
  Type: LAMBDA
  Fleet: Linux.Arm64.Large
SchemaVersion: "1.0"

# Optional - Set automatic triggers.
Triggers:
  - Type: Push
    Branches:
      - main

# Required - Define action configurations.
Actions:
  Build_c3:
    # Identifies the action. Do not modify this value.
    Identifier: aws/build@v1.0.0
    # Specifies the source and/or artifacts to pass to the action as input.
    Inputs:
      # Optional
      Sources:
        - WorkflowSource # This specifies that the action requires this Workflow as a source
    Outputs:
      Artifacts:
        - Name: rocket_lambda
          Files:
            - lambda/target/lambda/ftcwa-live
        - Name: cdk
          Files:
            - bin
            - lib
            - cdk.json
            - package-lock.json
            - package.json
    # Defines the action's properties.
    Configuration:
      # Required - Steps are sequential instructions that run shell commands
      Steps:
        - Run: cd lambda
        - Run: cargo lambda build -r --arm64 -F lambda
      Container:
        Registry: Other
        Image: ghcr.io/cargo-lambda/cargo-lambda:1.0.0
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
  AWSCDKDeploy_aa:
    # Identifies the action. Do not modify this value.
    Identifier: aws/cdk-deploy@v1.0.13
    # Required; You can use an environment, AWS account connection, and role to access AWS resources.
    Environment:
      Connections:
        - Role: CodeCatalyst-CDKDeployRole
          Name: "267253737119"
      Name: prod
    Inputs:
      Artifacts:
        - rocket_lambda
        - cdk
    Compute:
      Type: Lambda
      Fleet: Linux.Arm64.Large
    Configuration:
      StackName: FTCWALive
      Region: us-west-2
    DependsOn:
      - Build_c3
